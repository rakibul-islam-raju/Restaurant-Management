import Breadcrumb from "@/components/Breadcrumb";
import Footer from "@/components/Footer";
import Navbar from "@/components/Header/Navbar";
import Topbar from "@/components/Header/Topbar";
import Loader from "@/components/Loader";
import Modal from "@/components/Modal";
import ReviewForm from "@/components/Review/ReviewForm";
import SectionHeader from "@/components/SectionHeader";
import Buttton from "@/components/utils/Button";
import { AuthContext } from "@/contexts/AuthContext";
import orderService from "@/services/orderService";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";

export default function SingleOrder() {
	const router = useRouter();

	const { id } = router.query;

	const { authChecked, isAuthenticated, user } = useContext(AuthContext);

	const [order, setOrder] = useState(null);
	const [loading, setLoading] = useState(false);
	const [errorMessage, setErrorMessage] = useState(null);
	const [showReviewModal, setShowReviewModal] = useState(false);
	const [reviewItem, setReviewItem] = useState(null);

	const order_items = order?.order_items;

	const closeReviewModal = () => setShowReviewModal(false);

	const handleReview = (item) => {
		setReviewItem(item);
		setShowReviewModal(true);
	};

	const fetchOrderDetails = async (id) => {
		setLoading(true);
		setErrorMessage(null);
		try {
			const response = await orderService.getOrder(id);
			setOrder(response);
		} catch (err) {
			setErrorMessage(err?.response?.data?.detail || "Something went wrong!");
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		if (authChecked && !isAuthenticated) {
			router.push(`/login?next=${encodeURIComponent(`order/${id}`)}`);
		}
	}, [isAuthenticated, authChecked]);

	useEffect(() => {
		if (isAuthenticated && id) {
			fetchOrderDetails(id);
		}
	}, [isAuthenticated, id]);

	return !authChecked || loading ? (
		<Loader />
	) : (
		<>
			<Head>
				<title>Order Details | Take My Order</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
			</Head>

			<section className="">
				<Topbar />
				<Navbar />
				<Breadcrumb />

				<div className="wrapper">
					<SectionHeader
						upperText={"Order Details"}
						lowerText={"Order Details"}
					/>

					<Link href={"/profile"}>
						<Buttton text="<< Back To Profile" />
					</Link>
					<div className="p-4 w-full shadow rounded mt-4">
						{/* order short info */}
						<div className="flex flex-col md:flex-row gap-y-5 justify-between">
							<div className="">
								<h4 className="capitalize">
									{order?.user?.first_name} {order?.user?.last_name}
								</h4>
								<div>{order?.user?.email}</div>
							</div>
							<div className="">
								<div className="">
									<span className="font-semibold">Date</span>:{" "}
									{new Date(order?.created_at).toLocaleString()}
								</div>
								<div className="">
									<span className="font-semibold">Total</span>:{" "}
									{order?.total_price}
								</div>
								<div className="">
									<span className="font-semibold">Tax</span>: {order?.tax}
								</div>
								<div className="">
									<span className="font-semibold">Paid</span>:{" "}
									{order?.is_paid ? "Yes" : "No"}
								</div>
								<div className="">
									<span className="font-semibold">Served</span>:{" "}
									{order?.is_served ? "Yes" : "No"}
								</div>
							</div>
						</div>

						{/* order items */}
						<div className="flex flex-col gap-3 mt-4">
							{order_items?.length > 0 &&
								order_items?.map((item, i) => {
									const name = item?.name;
									const offer_price = item?.offer_price;
									const price = item?.price;
									const quantity = item?.quantity;

									return (
										<div
											key={item.id}
											className="flex justify-between border-t pt-1"
										>
											<div>
												<h4>{name}</h4>
												<div className="text-golden text-md font-semibold">
													{offer_price ? (
														<>
															<del className="text-sm text-gray-500">
																{price}
															</del>
															<span className="ml-2">{offer_price} ৳</span>
														</>
													) : (
														<span>{price} ৳</span>
													)}
												</div>
											</div>
											<div className="text-lg text-golden font-semibold">
												<div className="div">
													<span className="text-gray-700 font-normal">x</span> (
													{quantity}) <span className="text-gray-700">=</span>{" "}
													{offer_price
														? offer_price * quantity
														: price * quantity}{" "}
													৳
												</div>
												{order?.is_paid && order?.is_served && (
													<button
														onClick={() => handleReview(item)}
														className="mt-3 text-blue-500 bg-blue-100 px-2 py-1 rounded text-sm font-semibold hover:bg-blue-500 hover:text-white transition"
													>
														Review
													</button>
												)}
											</div>
										</div>
									);
								})}
						</div>
					</div>
				</div>
			</section>

			{/* review modal */}
			{showReviewModal && (
				<Modal handleClose={closeReviewModal}>
					<ReviewForm item={reviewItem} handleClose={closeReviewModal} />
				</Modal>
			)}

			<Footer />
		</>
	);
}
