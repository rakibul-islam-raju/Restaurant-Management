import Breadcrumb from "@/components/Breadcrumb";
import Footer from "@/components/Footer";
import Navbar from "@/components/Header/Navbar";
import Topbar from "@/components/Header/Topbar";
import Loader from "@/components/Loader";
import { ErrorMessage, WarningMessage } from "@/components/Messages";
import OrderTable from "@/components/Order/OrderTable";
import ReservationTable from "@/components/reservations/ReservationTable";
import ReviewsTable from "@/components/Review/ReviewsTable";
import SectionHeader from "@/components/SectionHeader";
import { AuthContext } from "@/contexts/AuthContext";
import orderService from "@/services/orderService";
import reservationService from "@/services/reservationService";
import reviewService from "@/services/reviewService";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";
import profilePic from "../assets/images/profile-picture.jpeg";

export default function Profile() {
	const router = useRouter();

	const { user, isAuthenticated, authChecked } = useContext(AuthContext);

	const [tabState, setTabState] = useState("orders");
	const [reservations, setReservations] = useState(null);
	const [orders, setOrders] = useState(null);
	const [reviews, setReviews] = useState(null);
	const [loading, setLoading] = useState(false);
	const [errorMessage, setErrorMessage] = useState(null);

	const fetchOrders = async (email) => {
		try {
			setLoading(true);
			setErrorMessage(null);
			const res = await orderService.getOrders(email);
			setOrders(res);
		} catch (err) {
			setErrorMessage(err?.data?.details || "Something went wrong!");
		} finally {
			setLoading(false);
		}
	};

	const fetchReservations = async (email) => {
		try {
			setLoading(true);
			setErrorMessage(null);
			const res = await reservationService.getReservations({
				user__email: email,
			});
			setReservations(res);
		} catch (err) {
			setErrorMessage(err?.data?.details || "Something went wrong!");
		} finally {
			setLoading(false);
		}
	};

	const fetchReviews = async (email) => {
		try {
			setLoading(true);
			setErrorMessage(null);
			const res = await reviewService.getReviewsByUser({}, email);
			setReviews(res);
		} catch (err) {
			setErrorMessage(err?.data?.details || "Something went wrong!");
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		if (user?.email) {
			fetchOrders(user.email);
			fetchReservations(user.email);
			fetchReviews(user.email);
		}
	}, [user]);

	useEffect(() => {
		if (authChecked && !isAuthenticated) {
			router.push(`/login?next=${encodeURIComponent("profile")}`);
		}
	}, [isAuthenticated]);

	return !authChecked ? (
		<h4>Loading</h4>
	) : (
		<>
			<Head>
				<title>Profile | Take My Order</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
			</Head>

			<section className="">
				<Topbar />
				<Navbar />
				<Breadcrumb />

				<div className="wrapper">
					<SectionHeader upperText={"Profile"} lowerText={"Profile"} />

					{errorMessage && <ErrorMessage text={errorMessage} />}

					<div className="">
						{/* user info */}
						<div className="p-2 rounded shadow w-full">
							<div className="flex gap-3 items-center">
								<div className="relative w-32 h-32">
									<Image
										src={profilePic}
										alt={`${user?.first_name} ${user?.last_name}`}
										fill
										className="object-cover object-center md:object-center rounded-full"
									/>
								</div>
								<div className="grow">
									<div className="flex justify-end">
										<button
											type="button"
											className="border border-golden px-2 py-1  text-golden font-semibold text-sm hover:bg-golden hover:text-white transition"
										>
											Edit Profile
										</button>
									</div>
									<h4>
										{user?.first_name} {user?.last_name}
									</h4>
									<div className="text-md text-gray-500">{user?.email}</div>
								</div>
							</div>
						</div>

						{/* user history */}
						{loading ? (
							<Loader />
						) : (
							<div className="mt-8">
								<div className="w-full flex justify-evenly border rounded">
									{["orders", "reservations", "reviews"].map((item) => (
										<div className="w-full text-center">
											<div
												className={`${
													tabState === item.toLowerCase()
														? "bg-golden text-white"
														: "bg-white text-golden"
												} uppercase py-2 rounded cursor-pointer transition`}
												onClick={() => setTabState(item.toLowerCase())}
											>
												{item}
											</div>
										</div>
									))}
								</div>

								<div className="mt-12">
									{/* orders */}
									{tabState === "orders" &&
										(orders?.results?.length < 1 ? (
											<WarningMessage text={"No data found!"} />
										) : (
											<OrderTable orders={orders} />
										))}

									{/* Reservations */}
									{tabState === "reservations" &&
										(reservations?.results?.length < 1 ? (
											<WarningMessage text={"No data found!"} />
										) : (
											<ReservationTable reservations={reservations} />
										))}

									{/* Reviews */}
									{tabState === "reviews" &&
										(reviews?.results?.length < 1 ? (
											<WarningMessage text={"No data found!"} />
										) : (
											<ReviewsTable reviews={reviews} />
										))}
								</div>
							</div>
						)}
					</div>
				</div>

				<Footer />
			</section>
		</>
	);
}
