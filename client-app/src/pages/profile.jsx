import Breadcrumb from "@/components/Breadcrumb";
import Footer from "@/components/Footer";
import Navbar from "@/components/Header/Navbar";
import Topbar from "@/components/Header/Topbar";
import Loader from "@/components/Loader";
import { ErrorMessage } from "@/components/Messages";
import Modal from "@/components/Modal";
import OrderTable from "@/components/Order/OrderTable";
import PasswordChangeForm from "@/components/profile/PasswordChangeForm";
import ProfileEditForm from "@/components/profile/ProfileEditForm";
import ReservationTable from "@/components/reservations/ReservationTable";
import ReviewsTable from "@/components/Review/ReviewsTable";
import SectionHeader from "@/components/SectionHeader";
import Buttton from "@/components/utils/Button";
import { AuthContext } from "@/contexts/AuthContext";
import userService from "@/services/userService";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";

export default function Profile() {
	const router = useRouter();

	const { user, isAuthenticated, authChecked } = useContext(AuthContext);

	const [tabState, setTabState] = useState("orders");
	const [userData, setUserData] = useState(null);
	const [loading, setLoading] = useState(false);
	const [errorMessage, setErrorMessage] = useState(null);
	const [openModal, setOpenModal] = useState(false);
	const [passEdit, setPassEdit] = useState(false);

	const togglePassEdit = () => setPassEdit((prevState) => !prevState);

	const modalOpenHandler = () => {
		setOpenModal(true);
		setPassEdit(false);
	};

	const modalCloseHandler = () => setOpenModal(false);

	const fetchUserInfo = async (email) => {
		try {
			setLoading(true);
			setErrorMessage(null);
			const res = await userService.getLoggedInUserData(email);
			setUserData(res);
		} catch (err) {
			setErrorMessage(err?.response?.data?.detail || "Something went wrong!");
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		if (user?.email) {
			fetchUserInfo(user.email);
		}
	}, [user]);

	useEffect(() => {
		if (authChecked && !isAuthenticated) {
			router.push(`/login?next=${encodeURIComponent("profile")}`);
		}
	}, [isAuthenticated]);

	return !authChecked ? (
		<Loader />
	) : (
		<>
			<Head>
				<title>Profile | Take My Order</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
			</Head>

			<section className="">
				<Topbar />
				<Navbar />
				<Breadcrumb />

				<div className="wrapper">
					<SectionHeader upperText={"Profile"} lowerText={"Profile"} />

					{errorMessage && <ErrorMessage text={errorMessage} />}

					<div className="">
						{/* user info */}
						<div className="p-2 rounded shadow w-full flex justify-between">
							<div className="flex gap-3 items-center">
								<div className="relative w-32 h-32">
									{userData?.image ? (
										<Image
											src={userData.image}
											alt={`${user?.full_name}`}
											fill
											className="object-cover object-center md:object-center rounded-full"
										/>
									) : (
										<div className="bg-golden rounded-full w-full p-2">
											{userData?.first_name?.charAt(0)}
											{userData?.last_name?.charAt(0)}
										</div>
									)}
								</div>
								<div className="grow">
									<h4>
										{user?.first_name} {user?.last_name}
									</h4>
									<div className="text-md text-gray-500">{user?.email}</div>
								</div>
							</div>
							<div className="">
								<button
									type="button"
									onClick={modalOpenHandler}
									className="block md:hidden"
								>
									<svg
										xmlns="http://www.w3.org/2000/svg"
										fill="none"
										viewBox="0 0 24 24"
										strokeWidth={1.5}
										stroke="currentColor"
										className="w-6 h-6 text-golden"
									>
										<path
											strokeLinecap="round"
											strokeLinejoin="round"
											d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
										/>
									</svg>
								</button>
								<div className="hidden md:block">
									<Buttton
										text="Edit Profile"
										onClickHandler={modalOpenHandler}
										type="button"
									/>
								</div>
							</div>
						</div>

						{/* user history */}
						{loading ? (
							<Loader />
						) : (
							<div className="mt-8">
								<div className="w-full flex justify-evenly border rounded">
									{["orders", "reservations", "reviews"].map((item) => (
										<div className="w-full text-center">
											<div
												className={`${
													tabState === item.toLowerCase()
														? "bg-golden text-white"
														: "bg-white text-golden"
												} uppercase py-2 rounded cursor-pointer transition`}
												onClick={() => setTabState(item.toLowerCase())}
											>
												{item}
											</div>
										</div>
									))}
								</div>

								<div className="mt-12">
									{/* orders */}
									{tabState === "orders" && <OrderTable />}

									{/* Reservations */}
									{tabState === "reservations" && <ReservationTable />}

									{/* Reviews */}
									{tabState === "reviews" && <ReviewsTable />}
								</div>
							</div>
						)}
					</div>
				</div>

				{/* edit form modal */}
				{openModal && (
					<Modal handleClose={modalCloseHandler}>
						{passEdit ? (
							<PasswordChangeForm
								togglePassEdit={togglePassEdit}
								handleClose={modalCloseHandler}
							/>
						) : (
							<ProfileEditForm
								togglePassEdit={togglePassEdit}
								editData={userData}
								handleClose={modalCloseHandler}
								setUserData={setUserData}
							/>
						)}
					</Modal>
				)}

				<Footer />
			</section>
		</>
	);
}
